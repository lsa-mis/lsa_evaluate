#!/usr/bin/env bash

# Configurable variables
PROTECTED_BRANCHES=("staging" "main")
ADMIN_FILE=".git-hooks/admins.txt"
LOG_FILE=".git-hooks/pre-push.log"
TEST_CMD="${TEST_CMD:-bundle exec rspec}"

CODE_EXTENSIONS="rb|js|py|go|java|ts|cpp|c|cs|php|swift|kt|rs|scala|pl|sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_failure() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

current_branch=$(git symbolic-ref --short HEAD)
echo -e "${YELLOW}Running pre-push hook on branch ${current_branch}${NC}"

# Load admin list from file if it exists (POSIX compatible)
ADMINS=()
if [[ -f "$ADMIN_FILE" ]]; then
    while IFS= read -r line || [[ -n "$line" ]]; do
        ADMINS+=("$line")
    done < "$ADMIN_FILE"
else
    ADMINS=("rsmoke")
fi

GIT_USER=$(git config user.name)
GIT_EMAIL=$(git config user.email)
is_admin=false
for admin in "${ADMINS[@]}"; do
    if [[ "$GIT_USER" == "$admin" || "$GIT_EMAIL" == "$admin" ]]; then
        is_admin=true
        break
    fi
    # Partial match for email domain
    if [[ "$admin" == *"@"* ]] && [[ "$GIT_EMAIL" == *"${admin#*@}" ]]; then
        is_admin=true
        break
    fi
done

# Build protected branch regex
protected_regex="^($(IFS='|'; echo "${PROTECTED_BRANCHES[*]}"))$"

# DRY RUN or HELP
if [[ "$1" == "--dry-run" || "$1" == "--help" ]]; then
    echo -e "${GREEN}Pre-push hook dry-run/help mode${NC}"
    echo "Admins: ${ADMINS[*]}"
    echo "Protected branches: ${PROTECTED_BRANCHES[*]}"
    echo "Test command: $TEST_CMD"
    exit 0
fi

# Print hook configuration summary (separate echos)
echo -e "${YELLOW}Admins: ${ADMINS[*]}${NC}"
echo -e "${YELLOW}Protected branches: ${PROTECTED_BRANCHES[*]}${NC}"
echo -e "${YELLOW}Test command: $TEST_CMD${NC}"

# Main branch check
if [[ "$current_branch" =~ $protected_regex ]]; then
    if [[ "$is_admin" == "true" ]]; then
        echo -e "${GREEN}Admin detected ($GIT_USER). Direct push allowed.${NC}"
        exit 0
    fi
    if git diff --name-only HEAD~1 HEAD | grep -q "^\.git-hooks/"; then
        echo -e "${YELLOW}Detected git hooks setup changes - allowing direct push${NC}"
        exit 0
    fi
    echo -e "${RED}Direct pushes to $current_branch are not allowed. Please create a pull request.${NC}"
    log_failure "Direct push blocked for $GIT_USER to $current_branch"
    exit 1
fi

while read local_ref local_sha remote_ref remote_sha
do
    target_branch=${remote_ref##refs/heads/}
    if [[ "$target_branch" =~ $protected_regex ]]; then
        if [[ "$is_admin" == "true" ]]; then
            echo -e "${GREEN}Admin detected ($GIT_USER). Direct push allowed.${NC}"
            exit 0
        fi
        if git diff --name-only HEAD~1 HEAD | grep -q "^\.git-hooks/"; then
            echo -e "${YELLOW}Detected git hooks setup changes - allowing push without tests${NC}"
            exit 0
        fi

        # Only run tests if code files changed
        if git diff --name-only origin/$target_branch | grep -E "\.($CODE_EXTENSIONS)$" > /dev/null; then
            # Stash any uncommitted changes
            if ! git diff --quiet HEAD; then
                echo "Stashing uncommitted changes..."
                git stash push -u
                STASHED=1
            fi

            if [[ -z "$SKIP_TESTS" ]]; then
                if $TEST_CMD; then
                    echo -e "${GREEN}All tests passed!${NC}"
                    [ "$STASHED" = "1" ] && git stash pop
                    exit 0
                else
                    echo -e "${RED}Tests failed. Push aborted.${NC}"
                    [ "$STASHED" = "1" ] && git stash pop
                    log_failure "Tests failed for $GIT_USER on $target_branch"
                    exit 1
                fi
            else
                echo -e "${YELLOW}SKIP_TESTS set, skipping test run.${NC}"
                [ "$STASHED" = "1" ] && git stash pop
                exit 0
            fi
        else
            echo -e "${YELLOW}No code changes detected, skipping tests.${NC}"
            exit 0
        fi
    fi
done

exit 0
